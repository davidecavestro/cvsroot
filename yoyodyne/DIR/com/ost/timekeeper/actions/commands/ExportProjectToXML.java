/*
 * ExportProjectToXML.java
 *
 * Created on 11 marzo 2005, 19.40
 */

package com.ost.timekeeper.actions.commands;

import com.ost.timekeeper.Application;
import com.ost.timekeeper.ApplicationData;
import com.ost.timekeeper.actions.commands.xml.Elements;
import com.ost.timekeeper.model.Progress;
import com.ost.timekeeper.model.ProgressItem;
import com.ost.timekeeper.model.Project;
import com.ost.timekeeper.util.CalendarUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;

/**
 * Esporta il progetto in formato XML.
 *
 * @author  davide
 */
public class ExportProjectToXML implements Command, Elements {
	
	private Project _project;
	private Document _document;
	
	/**
	 * Costruttore.
	 * @param document il documento da usare per l'esportazione.
	 * @param project il progetto da esportare.
	 */
	public ExportProjectToXML (final Project project, final Document document) {
		this._project=project;
		this._document=document;
	}
	
	public void execute () {
		final ProjectElement projectElement = new ProjectElement (this._project);
		this._document.setRootElement (projectElement);
	}
	
	private final class ProgressItemElement extends Element {
		public ProgressItemElement (final ProgressItem progressItem){
			super (PROGRESSITEM_ELEMENT);
			
			addContent (new NullableSingleValueElement (CODE_PROPERTY, progressItem.getCode ()));
			addContent (new NullableSingleValueElement (NAME_PROPERTY, progressItem.getName ()));
			addContent (new NullableSingleValueElement (DESCRIPTION_PROPERTY, progressItem.getName ()));
			addContent (new NullableSingleValueElement (NOTES_PROPERTY, progressItem.getName ()));
			
			for (final Iterator it = progressItem.getChildren ().iterator ();it.hasNext ();){
				final ProgressItem child = (ProgressItem)it.next ();
				try {
					addContent (new ProgressItemElement (child));
				} catch (Exception e){Application.getLogger ().error ("error exporting node", e);}
			}
			for (final Iterator it = progressItem.getProgresses ().iterator ();it.hasNext ();){
				final Progress progress = (Progress)it.next ();
				addContent (new ProgressElement (progress));
			}
		}
		
	}
	private final class ProjectElement extends Element {
		public ProjectElement (final Project project){
			super (PROJECT_ELEMENT);
			final ApplicationData applicationData = ApplicationData.getInstance ();
			addContent (new Comment ("Generated by "+applicationData.getApplicationInternalName ()+ " v."+applicationData.getVersionNumber ()+ " build "+applicationData.getBuildNumber ()));
			
			addContent (new NullableSingleValueElement  (NAME_PROPERTY, project.getName ()));
			addContent (new NullableSingleValueElement  (DESCRIPTION_PROPERTY, project.getDescription ()));
			addContent (new NullableSingleValueElement (NOTES_PROPERTY, project.getNotes ()));
			
			addContent (new ProgressItemElement (project.getRoot ()));
		}
	}
	private final class ProgressElement extends Element {
		public ProgressElement (final Progress progress){
			super (PROGRESS_ELEMENT);
			try {
				addContent (new NullableSingleValueElement (FROM_PROPERTY, CalendarUtils.getTS (progress.getFrom (), CalendarUtils.TIMESTAMP_FORMAT)));
			} catch (Exception e){Application.getLogger ().error ("error exporting progress", e);}
			try {
				addContent (new NullableSingleValueElement (TO_PROPERTY, CalendarUtils.getTS (progress.getTo (), CalendarUtils.TIMESTAMP_FORMAT)));
			} catch (Exception e){Application.getLogger ().error ("error exporting progress", e);}
			try {
				addContent (new NullableSingleValueElement (DESCRIPTION_PROPERTY, progress.getDescription ()));
			} catch (Exception e){Application.getLogger ().error ("error exporting progress", e);}
			try {
				addContent (new NullableSingleValueElement (NOTES_PROPERTY, progress.getNotes ()));
			} catch (Exception e){Application.getLogger ().error ("error exporting progress", e);}
			
		}
	}
	private final class NullableSingleValueElement extends Element {
		public NullableSingleValueElement (final String type, final String value){
			super (type);
			if (value!=null){
				setText (value);
			}
		}
	}
}
