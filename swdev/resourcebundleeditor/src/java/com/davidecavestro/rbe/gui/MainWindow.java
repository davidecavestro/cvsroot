/*
 * MainWIndow.java
 *
 * Created on 26 novembre 2005, 14.56
 */

package com.davidecavestro.rbe.gui;

import com.davidecavestro.common.gui.persistence.PersistenceUtils;
import com.davidecavestro.common.gui.persistence.PersistentComponent;
import com.davidecavestro.common.gui.persistence.UIPersister;
import com.davidecavestro.rbe.model.DefaultResourceBundleModel;
import com.davidecavestro.rbe.model.LocalizationProperties;
import com.davidecavestro.rbe.model.ResourceBundleModel;
import com.davidecavestro.rbe.model.event.ResourceBundleModelEvent;
import com.davidecavestro.rbe.model.event.ResourceBundleModelListener;
import java.util.Arrays;
import java.util.Locale;
import java.util.Properties;
import javax.swing.JComponent;
import javax.swing.JTree;
import javax.swing.event.EventListenerList;
import javax.swing.event.TreeModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

/**
 * La finestra principale dell'applicazione.
 *
 * @author  davide
 */
public class MainWindow extends javax.swing.JFrame implements PersistentComponent{
	
	private final ResourceBundleModel _resourceBundleModel;
	private final UIPersister _uiPersister;
	
	/** 
	 * Costruttore.
	 */
	public MainWindow (final ResourceBundleModel resourceBundleModel, final UIPersister uiPersister){
		this._uiPersister = uiPersister;
		this._resourceBundleModel = resourceBundleModel;
		initComponents ();
		this._uiPersister.register (new PersistenceTreeAdapter (this.treeScrollPane));
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        borderLayout1 = new java.awt.BorderLayout();
        mainPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        mainToolbar = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        tree_table_splitPane = new javax.swing.JSplitPane();
        treeScrollPane = new javax.swing.JScrollPane();
        bundleTree = new javax.swing.JTree();
        tableScrollPane = new javax.swing.JScrollPane();
        valuesTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        mainPanel.setLayout(new java.awt.BorderLayout());

        statusPanel.setLayout(new javax.swing.BoxLayout(statusPanel, javax.swing.BoxLayout.X_AXIS));

        jLabel1.setText("jLabel1");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPanel.add(jLabel1);

        jLabel2.setText("jLabel2");
        jLabel2.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPanel.add(jLabel2);

        statusPanel.add(progressBar);

        jLabel3.setText("jLabel3");
        jLabel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPanel.add(jLabel3);

        mainPanel.add(statusPanel, java.awt.BorderLayout.SOUTH);

        mainToolbar.setRollover(true);
        jButton1.setText("jButton1");
        mainToolbar.add(jButton1);

        jButton2.setText("jButton2");
        mainToolbar.add(jButton2);

        jButton3.setText("jButton3");
        mainToolbar.add(jButton3);

        mainPanel.add(mainToolbar, java.awt.BorderLayout.NORTH);

        tree_table_splitPane.setMaximumSize(null);
        tree_table_splitPane.setOneTouchExpandable(true);
        treeScrollPane.setMaximumSize(null);
        treeScrollPane.setMinimumSize(new java.awt.Dimension(50, 50));
        bundleTree.setMinimumSize(new java.awt.Dimension(50, 50));
        bundleTree.setModel(new LocalizationTreeModel (this._resourceBundleModel));
        treeScrollPane.setViewportView(bundleTree);

        tree_table_splitPane.setLeftComponent(treeScrollPane);

        tableScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        valuesTable.setModel(new LocalizationTableModel (this._resourceBundleModel));
        tableScrollPane.setViewportView(valuesTable);

        tree_table_splitPane.setRightComponent(tableScrollPane);

        mainPanel.add(tree_table_splitPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As ...");
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents
	
	private void exitMenuItemActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
		System.exit (0);
	}//GEN-LAST:event_exitMenuItemActionPerformed

	public String getPersistenceKey () {
		return "mainwindow";
	}	
	
	public void makePersistent (com.davidecavestro.common.gui.persistence.PersistenceStorage props) {
		PersistenceUtils.makeBoundsPersistent (props, this.getPersistenceKey (), this);
	}
	
	public boolean restorePersistent (com.davidecavestro.common.gui.persistence.PersistenceStorage props) {
		return PersistenceUtils.restorePersistentBounds (props, this.getPersistenceKey (), this);
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private java.awt.BorderLayout borderLayout1;
    private javax.swing.JTree bundleTree;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JToolBar mainToolbar;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JSplitPane tree_table_splitPane;
    private javax.swing.JTable valuesTable;
    // End of variables declaration//GEN-END:variables


	private class PersistenceTreeAdapter implements PersistentComponent	{
	
		private final JComponent _tree;
		public PersistenceTreeAdapter (JComponent tree){
			this._tree = tree;
		}
		public String getPersistenceKey () {
			return "localizationtree";
		}	

		public void makePersistent (com.davidecavestro.common.gui.persistence.PersistenceStorage props) {
			PersistenceUtils.makeBoundsPersistent (props, this.getPersistenceKey (), this._tree);
		}

		public boolean restorePersistent (com.davidecavestro.common.gui.persistence.PersistenceStorage props) {
			return PersistenceUtils.restorePersistentBounds (props, this.getPersistenceKey (), this._tree);
		}
	
	}
	
	private static class LocalizationTableModel extends AbstractTableModel implements ResourceBundleModelListener {
		
		private final ResourceBundleModel _resources;
		
		private Locale[] _locales;
		private String[] _keys;
		
		private final static String[] voidStringArray = new String[0];
		
		public LocalizationTableModel (ResourceBundleModel resources){
			this._resources = resources;
			reindex ();
			resources.addResourceBundleModelListener (this);
		}
		
		public int getColumnCount () {
			return this._resources.getLocales ().length+1;
		}
		
		public int getRowCount () {
			return this._resources.getKeySet ().size ();
		}
		
		public Object getValueAt (int rowIndex, int columnIndex) {
			if (columnIndex == 0){
				return this._keys[rowIndex];
			} else {
				return this._resources.getValue (this._locales[columnIndex-1],this._keys[rowIndex]);
			}
		}
		
		private void reindex (){
			this._locales = this._resources.getLocales ();
			this._keys = (String[])this._resources.getKeySet ().toArray (voidStringArray);
		}
		
	    public void resourceBundleChanged (ResourceBundleModelEvent e){
			reindex ();
		}
		
		public String getColumnName (int columnIndex) {
			if (columnIndex==0){
				return "keys";
			} else {
				return this._locales[columnIndex-1].toString ();
			}
		}
		
	}
	
	
	private static class LocalizationTreeModel implements TreeModel, ResourceBundleModelListener {
		
		private final ResourceBundleModel _model;
		private String[] _keys;
		
		private final static String[] voidStringArray = new String[0];
		
		private final EventListenerList listenerList = new EventListenerList ();
		
		public LocalizationTreeModel (ResourceBundleModel model) {
			this._model = model;
			model.addResourceBundleModelListener (this);
			cacheKeys ();
		}
		
		private void cacheKeys (){
			this._keys = (String[])this._model.getKeySet ().toArray (voidStringArray);
		}
		
	    public void resourceBundleChanged (ResourceBundleModelEvent e){
			cacheKeys ();
		}

		public Object getChild (Object parent, int index) {
			if (parent instanceof ResourceBundleModel){
				return ((ResourceBundleModel)parent).getLocales ()[index];
			} else if (parent instanceof Locale){
				return this._model.getKeySet ().toArray ()[index];
			}
			throw new Error ("Unsupported type for "+parent);
		}
		
		public int getChildCount (Object parent) {
			if (parent instanceof ResourceBundleModel){
				return ((ResourceBundleModel)parent).getLocales ().length;
			} else if (parent instanceof Locale){
				return this._model.getKeySet ().size ();
			}
			return 0;
		}
	
		public void addTreeModelListener (javax.swing.event.TreeModelListener l) {
		listenerList.add (TreeModelListener.class, l);
		}
		
		public int getIndexOfChild (Object parent, Object child) {
			if (parent instanceof ResourceBundleModel){
				final ResourceBundleModel model = (ResourceBundleModel)parent;
				final Locale[] locales = model.getLocales ();
				for (int i=0;i<locales.length;i++){
					if (locales[i]==child){
						return i;
					}
				}
				return -1;
			} else if (parent instanceof Locale){
//				final Locale locale = (Locale)parent;
				return Arrays.binarySearch (this._keys, child);
				//return this._model.getKeySet ().toArray ()[i]size ();
			}
			throw new Error ("Unsupported type for "+parent);
		}
		
		public Object getRoot () {
			return this._model;
		}
		
		public boolean isLeaf (Object node) {
			return node instanceof String;
		}
		
		public void removeTreeModelListener (javax.swing.event.TreeModelListener l) {
		listenerList.remove (TreeModelListener.class, l);
		}
		
		public void valueForPathChanged (javax.swing.tree.TreePath path, Object newValue) {
		}
		
	}
		
	
}
